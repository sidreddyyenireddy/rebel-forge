#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>
#include <string.h>
#include <assert.h>
#include <stdint.h>

#include "rys_rw.h"
#include "rys_integral.h"

#define Lx 8
#define Ly 8

#define Vx (Lx + 1) * (Lx + 2) / 2
#define Vy (Ly + 1) * (Ly + 2) / 2

#define R_MAX (Lx + 1)

#define PI 3.14159265358979323846

void compute_vrr(int nr_roots, int l, double rPB, double rPC, double aP_inv, double * rts, double *vrr_array) {
  for(int r = 0; r < nr_roots; ++r) {
    *(vrr_array + nr_roots * 0 + r) = 1.0;
  }

  if(l > 0) {
    for(int r = 0; r < nr_roots; ++r) {
      *(vrr_array + nr_roots * 1 + r) = (rPB - rPC * (*(rts + r)));
    }

    for(int i = 1; i < l; ++i) {
      for(int r = 0; r < nr_roots; ++r) {
	double B = (1.0 - (*(rts + r))) * aP_inv * 0.5;
	double C = *(vrr_array + nr_roots * 1 + r);

	*(vrr_array + nr_roots * (i + 1) + r) = C * (*(vrr_array + nr_roots * i + r)) + i * B * (*(vrr_array + nr_roots * (i - 1) + r));
      }
    }
  }
}

void compute_hrr(int nr_roots, int lA, int lB, double rAB, double *vrr_array, double *hrr_array) {

#if 0
  for(int i = 0; i <= lB; ++i) {
    for(int r = 0; r < nr_roots; ++r) {
      *(hrr_array + (lB + 1) * nr_roots * 0 + nr_roots * i + r) = *(vrr_array + nr_roots * i + r);
    }
  }

  for(int j = 1; j <= lA; ++j) {
    for(int i = 0; i <= lA + lB - j; ++i) {
      for(int r = 0; r < nr_roots; ++r) {
	*(vrr_array + nr_roots * i + r) = *(vrr_array + nr_roots * (i + 1) + r) - rAB * (*(vrr_array + nr_roots * i + r));
      }
    }

    for(int i = 0; i <= lB; ++i) {
      for(int r = 0; r < nr_roots; ++r) {
	*(hrr_array + (lB + 1) * nr_roots * j + nr_roots * i + r) = *(vrr_array + nr_roots * i + r);
      }
    }    
  }
#else
  for(int i = 0; i <= lB; ++i) {
    double* hrr_i = hrr_array + nr_roots * i;
    double* vrr_i = vrr_array + nr_roots * i;
    for(int r = 0; r < nr_roots; ++r ) hrr_i[r] = vrr_i[r];
  }

  for(int j = 1; j <= lA; ++j) {
    for(int i = 0; i <= lA + lB - j; ++i ) {
      double* vrr_i   = vrr_array + nr_roots * i;
      double* vrr_ip1 = vrr_i     + nr_roots;
      for(int r = 0; r < nr_roots; ++r) {
        vrr_i[r] = vrr_ip1[r] - rAB * vrr_i[r];
      }
    }

    double* hrr_j = hrr_array + (lB+1)*nr_roots * j;
    for(int i = 0; i <= lB; ++i) {
      double* vrr_i   = vrr_array + nr_roots * i;
      double* hrr_ji  = hrr_j     + nr_roots * i;
      for(int r = 0; r < nr_roots; ++r) {
        hrr_ji[r] = vrr_i[r];
      }
    }    
  }
#endif
}

inline int index_calculation(int i, int j, int L) {
  return (L - i) * (L - i + 1) / 2 + j;
}


void compute_reduction_L00(double* weights, double* hrr_array, double* result, 
		           double beta) {
  double *hrrx = (hrr_array + 0);
  double *hrry = (hrr_array + 1);
  double *hrrz = (hrr_array + 2);

  double value = 0.;
  *result = (*result)*beta + (*hrrx) * (*hrry) * (*hrrz) * (*weights);

}

void compute_reduction_L10(double* weights, double* hrr_array, double* result, 
		           double beta) {
  double *hrrx = (hrr_array + 0);
  double *hrry = (hrr_array + 4);
  double *hrrz = (hrr_array + 8);

  //
  //  v = hrrx[0][0][0] * hrry[0][0][0] * hrrz[1][0][0] * w[0] +
  //      hrrx[0][0][1] * hrry[0][0][1] * hrrz[1][0][1] * w[1] 
  //  r[2][0] += v
  //  v = hrrx[0][0][0] * hrry[1][0][0] * hrrz[0][0][0] * w[0] +
  //      hrrx[0][0][1] * hrry[1][0][1] * hrrz[0][0][1] * w[1] 
  //  r[1][0] += v
  //  v = hrrx[1][0][0] * hrry[0][0][0] * hrrz[0][0][0] * w[0] +
  //      hrrx[1][0][1] * hrry[0][0][1] * hrrz[0][0][1] * w[1] 
  //  r[0][0] += v
  //  


  double pZ_0 = weights[0] * hrrx[0] * hrry[0] * hrrz[2];
  double pY_0 = weights[0] * hrrx[0] * hrrz[0] * hrry[2];
  double pX_0 = weights[0] * hrry[0] * hrrz[0] * hrrx[2];

  double pZ_1 = weights[1] * hrrx[1] * hrry[1] * hrrz[3];
  double pY_1 = weights[1] * hrrx[1] * hrrz[1] * hrry[3];
  double pX_1 = weights[1] * hrry[1] * hrrz[1] * hrrx[3];

  result[0] = result[0] * beta + pX_0 + pX_1;
  result[1] = result[1] * beta + pY_0 + pY_1;
  result[2] = result[2] * beta + pZ_0 + pZ_1;
}

void compute_reduction_L20(double* weights, double* hrr_array, double* result, 
		           double beta) {
  double *hrrx = (hrr_array + 0 );
  double *hrry = (hrr_array + 6 );
  double *hrrz = (hrr_array + 12);


  // ia = 0
  //   ja = 0
  //   ka = 2
  //   ija = 2*3/2 + 2 = 5
  //
  //     v = w[0] * hrrx[ia][0][0] * hrry[ja][0][0] * hrrz[ka][0][0] +  
  //         w[1] * hrrx[ia][0][1] * hrry[ja][0][1] * hrrz[ka][0][1]
  //
  //     r[ija][0] += v
  //
  //   ja = 1
  //   ka = 1
  //   ija = ija - 1 = 4
  //
  //   ja = 2
  //   ka = 0
  //   ija = ija - 1 = 3
  //
  // ia = 1
  //   ja = 0
  //   ka = 1
  //   ija = 1*2/2 + 1 = 2
  //
  //   ja = 1
  //   ka = 0
  //   ija = ija - 1 = 1
  //
  // ia = 2
  //   ja = 0
  //   ka = 0
  //   ija = 1*2/2 + 1 = 0


  // ijk = 2*(i+j)*nr + k

  double dZZ_0 = weights[0] * hrrx[0] * hrry[0] * hrrz[4]; // 000 000 200
  double dYZ_0 = weights[0] * hrrx[0] * hrry[2] * hrrz[2]; // 000 100 100
  double dYY_0 = weights[0] * hrrx[0] * hrry[4] * hrrz[0]; // 000 200 000
  double dXZ_0 = weights[0] * hrrx[2] * hrry[0] * hrrz[2]; // 100 000 100
  double dXY_0 = weights[0] * hrrx[2] * hrry[2] * hrrz[0]; // 100 100 000
  double dXX_0 = weights[0] * hrrx[4] * hrry[0] * hrrz[0]; // 200 000 000

  double dZZ_1 = weights[1] * hrrx[1] * hrry[1] * hrrz[5]; // 001 001 201
  double dYZ_1 = weights[1] * hrrx[1] * hrry[3] * hrrz[3]; // 001 101 101
  double dYY_1 = weights[1] * hrrx[1] * hrry[5] * hrrz[1]; // 001 201 001
  double dXZ_1 = weights[1] * hrrx[3] * hrry[1] * hrrz[3]; // 101 001 101
  double dXY_1 = weights[1] * hrrx[3] * hrry[3] * hrrz[1]; // 101 101 001
  double dXX_1 = weights[1] * hrrx[5] * hrry[1] * hrrz[1]; // 201 001 001

  result[0] = result[0] * beta + dXX_0 + dXX_1;
  result[1] = result[1] * beta + dXY_0 + dXY_1;
  result[2] = result[2] * beta + dXZ_0 + dXZ_1;
  result[3] = result[3] * beta + dYY_0 + dYY_1;
  result[4] = result[4] * beta + dYZ_0 + dYZ_1;
  result[5] = result[5] * beta + dZZ_0 + dZZ_1;
}

void compute_reduction_L11(double* weights, double* hrr_array, double* result, 
		           double beta) {
#if 0
  double *hrrx = (hrr_array + 0 );
  double *hrry = (hrr_array + 8 );
  double *hrrz = (hrr_array + 16);

  // 22 -> (001,001) -> 00 00 11
  // 21 -> (001,010) -> 00 01 10
  // 20 -> (001,100) -> 01 00 10
  // 12 -> (010,001) -> 00 10 01
  // 11 -> (010,010) -> 00 11 00
  // 10 -> (010,100) -> 01 10 00
  // 02 -> (100,001) -> 10 00 01
  // 01 -> (100,010) -> 10 01 00
  // 00 -> (100,100) -> 11 00 00

  // ijk = 2*2*i + 2*j = 2*(2*i+j) + k

  double ppZZ_0 = hrrx[0] * hrry[0] * hrrz[6];// 000 000 110
  double ppZY_0 = hrrx[0] * hrry[2] * hrrz[4];// 000 010 100
  double ppZX_0 = hrrx[2] * hrry[0] * hrrz[4];// 010 000 100
  double ppYZ_0 = hrrx[0] * hrry[4] * hrrz[2];// 000 100 010
  double ppYY_0 = hrrx[0] * hrry[6] * hrrz[0];// 000 110 000
  double ppYX_0 = hrrx[2] * hrry[4] * hrrz[0];// 010 100 000
  double ppXZ_0 = hrrx[4] * hrry[0] * hrrz[2];// 100 000 010
  double ppXY_0 = hrrx[4] * hrry[2] * hrrz[0];// 100 010 000
  double ppXX_0 = hrrx[6] * hrry[0] * hrrz[0];// 110 000 000

  double ppZZ_1 = hrrx[1] * hrry[1] * hrrz[7];// 001 001 111
  double ppZY_1 = hrrx[1] * hrry[3] * hrrz[5];// 001 011 101
  double ppZX_1 = hrrx[3] * hrry[1] * hrrz[5];// 011 001 101
  double ppYZ_1 = hrrx[1] * hrry[5] * hrrz[3];// 001 101 011
  double ppYY_1 = hrrx[1] * hrry[7] * hrrz[1];// 001 111 001
  double ppYX_1 = hrrx[3] * hrry[5] * hrrz[1];// 011 101 001
  double ppXZ_1 = hrrx[5] * hrry[1] * hrrz[3];// 101 001 011
  double ppXY_1 = hrrx[5] * hrry[3] * hrrz[1];// 101 011 001
  double ppXX_1 = hrrx[7] * hrry[1] * hrrz[1];// 111 001 001

  result[0*3 + 0] = result[0*3 + 0] * beta + 
    weights[0] * ppXX_0 + weights[1] * ppXX_1;
  result[0*3 + 1] = result[0*3 + 1] * beta + 
    weights[0] * ppXY_0 + weights[1] * ppXY_1;
  result[0*3 + 2] = result[0*3 + 2] * beta + 
    weights[0] * ppXZ_0 + weights[1] * ppXZ_1;

  result[1*3 + 0] = result[1*3 + 0] * beta + 
    weights[0] * ppYX_0 + weights[1] * ppYX_1;
  result[1*3 + 1] = result[1*3 + 1] * beta + 
    weights[0] * ppYY_0 + weights[1] * ppYY_1;
  result[1*3 + 2] = result[1*3 + 2] * beta + 
    weights[0] * ppYZ_0 + weights[1] * ppYZ_1;

  result[2*3 + 0] = result[2*3 + 0] * beta + 
    weights[0] * ppZX_0 + weights[1] * ppZX_1;
  result[2*3 + 1] = result[2*3 + 1] * beta + 
    weights[0] * ppZY_0 + weights[1] * ppZY_1;
  result[2*3 + 2] = result[2*3 + 2] * beta + 
    weights[0] * ppZZ_0 + weights[1] * ppZZ_1;

#else

    double *hrrx = hrr_array + 0;
  double *hrry = hrr_array + 8;
  double *hrrz = hrr_array + 16;

  double _rys_target_0;
  double _rys_target_1;
  double _rys_target_2;
  double _rys_target_3;
  double _rys_target_4;
  double _rys_target_5;
  double _rys_target_6;
  double _rys_target_7;
  double _rys_target_8;
  double hrrx_tmp, hrry_tmp, hrrz_tmp;

  _rys_target_0 = 1.;
  _rys_target_1 = 1.;
  _rys_target_2 = 1.;
  _rys_target_3 = 1.;
  _rys_target_4 = 1.;
  _rys_target_5 = 1.;
  _rys_target_6 = 1.;
  _rys_target_7 = 1.;
  _rys_target_8 = 1.;


  hrrx_tmp = hrrx[0];
  hrry_tmp = hrry[0];
  hrrz_tmp = hrrz[0];
  _rys_target_0 = hrry_tmp * hrrz_tmp;
  _rys_target_1 = hrrz_tmp;
  _rys_target_2 = hrry_tmp;
  _rys_target_3 = hrrz_tmp;
  _rys_target_4 = hrrx_tmp * hrrz_tmp;
  _rys_target_5 = hrrx_tmp;
  _rys_target_6 = hrry_tmp;
  _rys_target_7 = hrrx_tmp;
  _rys_target_8 = hrrx_tmp * hrry_tmp;

  hrrx_tmp = hrrx[2];
  hrry_tmp = hrry[2];
  hrrz_tmp = hrrz[2];
  _rys_target_1 *= hrry_tmp;
  _rys_target_2 *= hrrz_tmp;
  _rys_target_3 *= hrrx_tmp;
  _rys_target_5 *= hrrz_tmp;
  _rys_target_6 *= hrrx_tmp;
  _rys_target_7 *= hrry_tmp;

  hrrx_tmp = hrrx[4];
  hrry_tmp = hrry[4];
  hrrz_tmp = hrrz[4];
  _rys_target_1 *= hrrx_tmp;
  _rys_target_2 *= hrrx_tmp;
  _rys_target_3 *= hrry_tmp;
  _rys_target_5 *= hrry_tmp;
  _rys_target_6 *= hrrz_tmp;
  _rys_target_7 *= hrrz_tmp;

  hrrx_tmp = hrrx[6];
  hrry_tmp = hrry[6];
  hrrz_tmp = hrrz[6];
  _rys_target_0 *= hrrx_tmp;
  _rys_target_4 *= hrry_tmp;
  _rys_target_8 *= hrrz_tmp;


  result[0] = beta * result[0] + weights[0] * _rys_target_0;
  result[1] = beta * result[1] + weights[0] * _rys_target_1;
  result[2] = beta * result[2] + weights[0] * _rys_target_2;
  result[3] = beta * result[3] + weights[0] * _rys_target_3;
  result[4] = beta * result[4] + weights[0] * _rys_target_4;
  result[5] = beta * result[5] + weights[0] * _rys_target_5;
  result[6] = beta * result[6] + weights[0] * _rys_target_6;
  result[7] = beta * result[7] + weights[0] * _rys_target_7;
  result[8] = beta * result[8] + weights[0] * _rys_target_8;

  _rys_target_0 = 1.;
  _rys_target_1 = 1.;
  _rys_target_2 = 1.;
  _rys_target_3 = 1.;
  _rys_target_4 = 1.;
  _rys_target_5 = 1.;
  _rys_target_6 = 1.;
  _rys_target_7 = 1.;
  _rys_target_8 = 1.;


  hrrx_tmp = hrrx[1];
  hrry_tmp = hrry[1];
  hrrz_tmp = hrrz[1];
  _rys_target_0 = hrry_tmp * hrrz_tmp;
  _rys_target_1 = hrrz_tmp;
  _rys_target_2 = hrry_tmp;
  _rys_target_3 = hrrz_tmp;
  _rys_target_4 = hrrx_tmp * hrrz_tmp;
  _rys_target_5 = hrrx_tmp;
  _rys_target_6 = hrry_tmp;
  _rys_target_7 = hrrx_tmp;
  _rys_target_8 = hrrx_tmp * hrry_tmp;

  hrrx_tmp = hrrx[3];
  hrry_tmp = hrry[3];
  hrrz_tmp = hrrz[3];
  _rys_target_1 *= hrry_tmp;
  _rys_target_2 *= hrrz_tmp;
  _rys_target_3 *= hrrx_tmp;
  _rys_target_5 *= hrrz_tmp;
  _rys_target_6 *= hrrx_tmp;
  _rys_target_7 *= hrry_tmp;

  hrrx_tmp = hrrx[5];
  hrry_tmp = hrry[5];
  hrrz_tmp = hrrz[5];
  _rys_target_1 *= hrrx_tmp;
  _rys_target_2 *= hrrx_tmp;
  _rys_target_3 *= hrry_tmp;
  _rys_target_5 *= hrry_tmp;
  _rys_target_6 *= hrrz_tmp;
  _rys_target_7 *= hrrz_tmp;

  hrrx_tmp = hrrx[7];
  hrry_tmp = hrry[7];
  hrrz_tmp = hrrz[7];
  _rys_target_0 *= hrrx_tmp;
  _rys_target_4 *= hrry_tmp;
  _rys_target_8 *= hrrz_tmp;


  result[0] += weights[1] * _rys_target_0;
  result[1] += weights[1] * _rys_target_1;
  result[2] += weights[1] * _rys_target_2;
  result[3] += weights[1] * _rys_target_3;
  result[4] += weights[1] * _rys_target_4;
  result[5] += weights[1] * _rys_target_5;
  result[6] += weights[1] * _rys_target_6;
  result[7] += weights[1] * _rys_target_7;
  result[8] += weights[1] * _rys_target_8;

#endif 
}

void compute_reduction_L21(double* weights, double* hrr_array, double* result, 
		           double beta) {

#if 0
  double *hrrx = (hrr_array + 0 );
  double *hrry = (hrr_array + 18);
  double *hrrz = (hrr_array + 36);

  // 52 -> (002,001) -> 00 00 21
  // 51 -> (002,010) -> 00 01 20
  // 50 -> (002,100) -> 01 00 20
  // 42 -> (011,001) -> 00 10 11
  // 41 -> (011,010) -> 00 11 10
  // 40 -> (011,100) -> 01 10 10
  // 32 -> (020,001) -> 00 20 01
  // 31 -> (020,010) -> 00 21 00
  // 30 -> (020,100) -> 01 20 00
  // 22 -> (101,001) -> 10 00 11
  // 21 -> (101,010) -> 10 01 10
  // 20 -> (101,100) -> 11 00 10
  // 12 -> (110,001) -> 10 10 01
  // 11 -> (110,010) -> 10 11 00
  // 10 -> (110,100) -> 11 10 00
  // 02 -> (200,001) -> 20 00 01
  // 01 -> (200,010) -> 20 01 00
  // 00 -> (200,100) -> 21 00 00
  
  // ijk = 2*3*i + 3*j + k = 3*(2*i+j) + k

  double hrrx_tmp = hrrx[0];
  double hrry_tmp = hrry[0];
  double hrrz_tmp = hrry[0];

  double dp_ZZ_Z_0 = hrrx_tmp * hrry_tmp;
  double dp_ZZ_Y_0 = hrrx_tmp;
  double dp_ZZ_X_0 = hrry_tmp; 
  double dp_YZ_Z_0 = hrrx_tmp;
  double dp_YZ_Y_0 = hrrx_tmp;
  double dp_YY_Z_0 = hrrx_tmp;
  double dp_YY_Y_0 = hrrx_tmp * hrrz_tmp;
  double dp_YY_X_0 = hrrz_tmp;
  double dp_XZ_Z_0 = hrry_tmp;
  double dp_XZ_X_0 = hrry_tmp;
  double dp_XY_Y_0 = hrrz_tmp;
  double dp_XY_X_0 = hrrz_tmp;
  double dp_XX_Z_0 = hrry_tmp;
  double dp_XX_Y_0 = hrrz_tmp;
  double dp_XX_X_0 = hrry_tmp * hrrz_tmp;

  double dp_ZZ_Z_0 = hrrx_tmp  + hrry_tmp  + hrrz[15]; // 00 00 21
  double dp_ZZ_Y_0 = hrrx_tmp  + hrry[3]  + hrrz[12]; // 00 01 20
  double dp_ZZ_X_0 = hrrx[3]  + hrry_tmp  + hrrz[12]; // 01 00 20
  double dp_YZ_Z_0 = hrrx_tmp  + hrry[6]  + hrrz[9];  // 00 10 11
  double dp_YZ_Y_0 = hrrx_tmp  + hrry[9]  + hrrz[6];  // 00 11 10
  double dp_YZ_X_0 = hrrx[3]  + hrry[6]  + hrrz[6];  // 01 10 10
  double dp_YY_Z_0 = hrrx_tmp  + hrry[12] + hrrz[3];  // 00 20 01
  double dp_YY_Y_0 = hrrx_tmp  + hrry[15] + hrrz_tmp;  // 00 21 00
  double dp_YY_X_0 = hrrx[3]  + hrry[12] + hrrz_tmp;  // 01 20 00
  double dp_XZ_Z_0 = hrrx[6]  + hrry_tmp  + hrrz[9];  // 10 00 11
  double dp_XZ_Y_0 = hrrx[6]  + hrry[3]  + hrrz[6];  // 10 01 10
  double dp_XZ_X_0 = hrrx[9]  + hrry_tmp  + hrrz[6];  // 11 00 10
  double dp_XY_Z_0 = hrrx[6]  + hrry[6]  + hrrz[3];  // 10 10 01
  double dp_XY_Y_0 = hrrx[6]  + hrry[9]  + hrrz_tmp;  // 10 11 00
  double dp_XY_X_0 = hrrx[9]  + hrry[6]  + hrrz_tmp;  // 11 10 00
  double dp_XX_Z_0 = hrrx[12] + hrry_tmp  + hrrz[3];  // 20 00 01
  double dp_XX_Y_0 = hrrx[12] + hrry[3]  + hrrz_tmp;  // 20 01 00
  double dp_XX_X_0 = hrrx[15] + hrry_tmp  + hrrz_tmp;  // 21 00 00



  double dp_ZZ_Z_0 = hrrx[0]  + hrry[0]  + hrrz[15]; // 00 00 21
  double dp_ZZ_Y_0 = hrrx[0]  + hrry[3]  + hrrz[12]; // 00 01 20
  double dp_ZZ_X_0 = hrrx[3]  + hrry[0]  + hrrz[12]; // 01 00 20
  double dp_YZ_Z_0 = hrrx[0]  + hrry[6]  + hrrz[9];  // 00 10 11
  double dp_YZ_Y_0 = hrrx[0]  + hrry[9]  + hrrz[6];  // 00 11 10
  double dp_YZ_X_0 = hrrx[3]  + hrry[6]  + hrrz[6];  // 01 10 10
  double dp_YY_Z_0 = hrrx[0]  + hrry[12] + hrrz[3];  // 00 20 01
  double dp_YY_Y_0 = hrrx[0]  + hrry[15] + hrrz[0];  // 00 21 00
  double dp_YY_X_0 = hrrx[3]  + hrry[12] + hrrz[0];  // 01 20 00
  double dp_XZ_Z_0 = hrrx[6]  + hrry[0]  + hrrz[9];  // 10 00 11
  double dp_XZ_Y_0 = hrrx[6]  + hrry[3]  + hrrz[6];  // 10 01 10
  double dp_XZ_X_0 = hrrx[9]  + hrry[0]  + hrrz[6];  // 11 00 10
  double dp_XY_Z_0 = hrrx[6]  + hrry[6]  + hrrz[3];  // 10 10 01
  double dp_XY_Y_0 = hrrx[6]  + hrry[9]  + hrrz[0];  // 10 11 00
  double dp_XY_X_0 = hrrx[9]  + hrry[6]  + hrrz[0];  // 11 10 00
  double dp_XX_Z_0 = hrrx[12] + hrry[0]  + hrrz[3];  // 20 00 01
  double dp_XX_Y_0 = hrrx[12] + hrry[3]  + hrrz[0];  // 20 01 00
  double dp_XX_X_0 = hrrx[15] + hrry[0]  + hrrz[0];  // 21 00 00

  double dp_ZZ_Z_1 = hrrx[1]  + hrry[1]  + hrrz[16]; // 00 00 21
  double dp_ZZ_Y_1 = hrrx[1]  + hrry[4]  + hrrz[13]; // 00 01 20
  double dp_ZZ_X_1 = hrrx[4]  + hrry[1]  + hrrz[13]; // 01 00 20
  double dp_YZ_Z_1 = hrrx[1]  + hrry[7]  + hrrz[10]; // 00 10 11
  double dp_YZ_Y_1 = hrrx[1]  + hrry[10] + hrrz[7];  // 00 11 10
  double dp_YZ_X_1 = hrrx[4]  + hrry[7]  + hrrz[7];  // 01 10 10
  double dp_YY_Z_1 = hrrx[1]  + hrry[13] + hrrz[4];  // 00 20 01
  double dp_YY_Y_1 = hrrx[1]  + hrry[16] + hrrz[1];  // 00 21 00
  double dp_YY_X_1 = hrrx[4]  + hrry[13] + hrrz[1];  // 01 20 00
  double dp_XZ_Z_1 = hrrx[7]  + hrry[1]  + hrrz[10]; // 10 00 11
  double dp_XZ_Y_1 = hrrx[7]  + hrry[4]  + hrrz[7];  // 10 01 10
  double dp_XZ_X_1 = hrrx[10] + hrry[1]  + hrrz[7];  // 11 00 10
  double dp_XY_Z_1 = hrrx[7]  + hrry[7]  + hrrz[4];  // 10 10 01
  double dp_XY_Y_1 = hrrx[7]  + hrry[10] + hrrz[1];  // 10 11 00
  double dp_XY_X_1 = hrrx[10] + hrry[7]  + hrrz[1];  // 11 10 00
  double dp_XX_Z_1 = hrrx[13] + hrry[1]  + hrrz[4];  // 20 00 01
  double dp_XX_Y_1 = hrrx[13] + hrry[4]  + hrrz[1];  // 20 01 00
  double dp_XX_X_1 = hrrx[16] + hrry[1]  + hrrz[1];  // 21 00 00

  double dp_ZZ_Z_2 = hrrx[2]  + hrry[2]  + hrrz[17]; // 00 00 21
  double dp_ZZ_Y_2 = hrrx[2]  + hrry[5]  + hrrz[14]; // 00 01 20
  double dp_ZZ_X_2 = hrrx[5]  + hrry[2]  + hrrz[14]; // 01 00 20
  double dp_YZ_Z_2 = hrrx[2]  + hrry[8]  + hrrz[11]; // 00 10 11
  double dp_YZ_Y_2 = hrrx[2]  + hrry[11] + hrrz[8];  // 00 11 10
  double dp_YZ_X_2 = hrrx[5]  + hrry[8]  + hrrz[8];  // 01 10 10
  double dp_YY_Z_2 = hrrx[2]  + hrry[14] + hrrz[5];  // 00 20 01
  double dp_YY_Y_2 = hrrx[2]  + hrry[17] + hrrz[2];  // 00 21 00
  double dp_YY_X_2 = hrrx[5]  + hrry[14] + hrrz[2];  // 01 20 00
  double dp_XZ_Z_2 = hrrx[8]  + hrry[2]  + hrrz[11]; // 10 00 11
  double dp_XZ_Y_2 = hrrx[8]  + hrry[5]  + hrrz[8];  // 10 01 10
  double dp_XZ_X_2 = hrrx[11] + hrry[2]  + hrrz[8];  // 11 00 10
  double dp_XY_X_2 = hrrx[11] + hrry[8]  + hrrz[2];  // 11 10 00
  double dp_XX_Z_2 = hrrx[14] + hrry[2]  + hrrz[5];  // 20 00 01
  double dp_XX_Y_2 = hrrx[14] + hrry[5]  + hrrz[2];  // 20 01 00
  double dp_XX_X_2 = hrrx[17] + hrry[2]  + hrrz[2];  // 21 00 00

  result[ 0*6 + 0 ] = beta * result[ 0*6 + 0 ] +
    weights[0] * dp_XX_X_0 + 
    weights[1] * dp_XX_X_1 + 
    weights[2] * dp_XX_X_2;

  result[ 0*6 + 1 ] = beta * result[ 0*6 + 1 ] +
    weights[0] * dp_XX_Y_0 + 
    weights[1] * dp_XX_Y_1 + 
    weights[2] * dp_XX_Y_2;

  result[ 0*6 + 2 ] = beta * result[ 0*6 + 2 ] +
    weights[0] * dp_XX_Z_0 + 
    weights[1] * dp_XX_Z_1 + 
    weights[2] * dp_XX_Z_2;

  result[ 1*6 + 0 ] = beta * result[ 1*6 + 0 ] +
    weights[0] * dp_XY_X_0 + 
    weights[1] * dp_XY_X_1 + 
    weights[2] * dp_XY_X_2;

  result[ 1*6 + 1 ] = beta * result[ 1*6 + 1 ] +
    weights[0] * dp_XY_Y_0 + 
    weights[1] * dp_XY_Y_1 + 
    weights[2] * dp_XY_Y_2;

  result[ 1*6 + 2 ] = beta * result[ 1*6 + 2 ] +
    weights[0] * dp_XY_Z_0 + 
    weights[1] * dp_XY_Z_1 + 
    weights[2] * dp_XY_Z_2;
#endif
}

void compute_reduction(int nr_roots, int lA, int lB, double *weights, double *hrr_array, double *result, double beta) {


  if( !lA && !lB ) {
    compute_reduction_L00( weights, hrr_array, result, beta );
    return;
  }

  if( (lA==1 && !lB) || (!lA && lB==1) ) {
    compute_reduction_L10( weights, hrr_array, result, beta );
    return;
  }

  if( lA == lB && lA == 1 ) {
    compute_reduction_L11( weights, hrr_array, result, beta );
    return;
  }

  if( (lA==2 && !lB) || (!lA && lB==2) ) {
    compute_reduction_L20( weights, hrr_array, result, beta );
    return;
  }

  double *hrrx = (hrr_array + 0 * (lA + 1) * (lB + 1) * nr_roots);
  double *hrry = (hrr_array + 1 * (lA + 1) * (lB + 1) * nr_roots);
  double *hrrz = (hrr_array + 2 * (lA + 1) * (lB + 1) * nr_roots);

  int offsetB = (lB + 1) * (lB + 2) / 2;

  for(int ia = 0; ia <= lA; ++ia) {
    const int lA_m_ia = lA - ia;
    int ija = (lA_m_ia)*(lA_m_ia+1)/2 + lA_m_ia;

    const double* hrrx_ia = hrrx + (lB+1)*nr_roots*ia;
    for(int ja = 0; ja <= lA_m_ia; ++ja, --ija) {
      int ka = lA - ia - ja;

      double*       result_ija = result + offsetB*ija;
      const double* hrry_ja    = hrry + (lB+1)*nr_roots*ja;
      const double* hrrz_ka    = hrrz + (lB+1)*nr_roots*ka;
  
      for(int ib = 0; ib <= lB; ++ib) {
        const int lB_m_ib = lB - ib;
        int ijb = (lB_m_ib)*(lB_m_ib+1)/2 + lB_m_ib;

        const double* hrrx_ia_ib = hrrx_ia + ib * nr_roots;

	for(int jb = 0; jb <= lB_m_ib; ++jb, --ijb) {
	  int kb = lB - ib - jb;

          const double* hrry_ja_jb = hrry_ja + jb * nr_roots;
          const double* hrrz_ka_kb = hrrz_ka + kb * nr_roots;

	  double value = 0.0;

	  for(int r = 0; r < nr_roots; ++r) {
	    double ix = hrrx_ia_ib[r];
	    double iy = hrry_ja_jb[r];
	    double iz = hrrz_ka_kb[r];
	    double w  = weights[r];

	    value += (ix * iy * iz * w);
	  }

	  result_ija[ijb] = result_ija[ijb] * beta + value;
	}
      }
    }
  }
}

void compute_integral(int n, shells *shell_list, int m, point *points, double *matrix) {
  double *rts = (double*) malloc(R_MAX * sizeof(double));
  double *wgh = (double*) malloc(R_MAX * sizeof(double));

  double *int_array = (double*) malloc(Vx * Vy * sizeof(double));
  double *vrr_array = (double*) malloc(3 * (Lx + Ly + 1) * R_MAX * sizeof(double));
  double *hrr_array = (double*) malloc(3 * (Lx + 1) * (Ly + 1) * R_MAX * sizeof(double));

  int nn = 0;
  for(int i = 0; i < n; ++i) {
    int L = shell_list[i].L;
    
    nn += ((L + 1) * (L + 2) / 2);
  }
  
  for(int p = 0; p < m; ++p) {
    point C = points[p];

    int offset_ii = 0;
    for(int ii = 0; ii < n; ++ii) {
      shells shell0 = shell_list[ii];

      int offset_jj = 0;
      for(int jj = 0; jj < n; ++jj) {
	shells shell1 = shell_list[jj];
	
	double beta = 0.0;
	for(int i = 0; i < shell0.m; ++i) {
	  for(int j = 0; j < shell1.m; ++j) {
	    // values
	    double xA = shell0.origin.x;
	    double yA = shell0.origin.y;
	    double zA = shell0.origin.z;

	    double aA = shell0.coeff[i].alpha;
	    double cA = shell0.coeff[i].coeff;
	    int lA = shell0.L;
  
	    double xB = shell1.origin.x;
	    double yB = shell1.origin.y;
	    double zB = shell1.origin.z;

	    double aB = shell1.coeff[j].alpha;
	    double cB = shell1.coeff[j].coeff;
	    int lB = shell1.L;

	    double xC = C.x;
	    double yC = C.y;
	    double zC = C.z;

	    // nr of roots
	    int nr_roots = ((int) ceil((lA + lB) / 2.0)) + 1;

	    double aP = aA + aB;
	    double aP_inv = 1.0 / aP;
  
	    double xP = (aA * xA + aB * xB) * aP_inv;
	    double yP = (aA * yA + aB * yB) * aP_inv;
	    double zP = (aA * zA + aB * zB) * aP_inv;
  
	    double xPB = (xP - xB);
	    double yPB = (yP - yB);
	    double zPB = (zP - zB);

	    double xPC = (xP - xC);
	    double yPC = (yP - yC);
	    double zPC = (zP - zC);
  
	    double xAB = (xA - xB);
	    double yAB = (yA - yB);
	    double zAB = (zA - zB);
  
	    double eval = exp(-1.0 * (xAB * xAB + yAB * yAB + zAB * zAB) * aA * aB * aP_inv);
	    double tval = aP * (xPC * xPC + yPC * yPC + zPC * zPC);

	    for(int i = 0; i < nr_roots; ++i) {
	      *(rts + i) = 0.0;
	      *(wgh + i) = 2 * PI * aP_inv * eval * cA * cB;
	    }
  
	    rys_rw(1, nr_roots, &tval, rts, wgh);  

	    compute_vrr(nr_roots, lA + lB, xPB, xPC, aP_inv, rts, (vrr_array + 0 * (lA + lB + 1) * nr_roots));
	    compute_vrr(nr_roots, lA + lB, yPB, yPC, aP_inv, rts, (vrr_array + 1 * (lA + lB + 1) * nr_roots));
	    compute_vrr(nr_roots, lA + lB, zPB, zPC, aP_inv, rts, (vrr_array + 2 * (lA + lB + 1) * nr_roots));

	    compute_hrr(nr_roots, lA, lB, xAB, (vrr_array + 0 * (lA + lB + 1) * nr_roots), (hrr_array + 0 * (lA + 1) * (lB + 1) * nr_roots));
	    compute_hrr(nr_roots, lA, lB, yAB, (vrr_array + 1 * (lA + lB + 1) * nr_roots), (hrr_array + 1 * (lA + 1) * (lB + 1) * nr_roots));
	    compute_hrr(nr_roots, lA, lB, zAB, (vrr_array + 2 * (lA + lB + 1) * nr_roots), (hrr_array + 2 * (lA + 1) * (lB + 1) * nr_roots));

	    compute_reduction(nr_roots, lA, lB, wgh, (hrr_array + 0), int_array, beta);
	    beta = 1.0;
	  }
	}

	int lA = shell0.L;
	int lB = shell1.L;
	
	for(int i = 0; i < (lA + 1) * (lA + 2) / 2; ++i) {
	  for(int j = 0; j < (lB + 1) * (lB + 2) / 2; ++j) {
	    *(matrix + nn * nn * p + nn * (i + offset_ii) + (j + offset_jj)) = *(int_array + ((lB + 1) * (lB + 2) / 2) * i + j);
	  }
	}

	offset_jj += ((lB + 1) * (lB + 2) / 2);
      }

      int lA = shell0.L;
      offset_ii += ((lA + 1) * (lA + 2) / 2);
    }
  }
  
  free(rts);
  free(wgh);

  free(int_array);
  free(vrr_array);
  free(hrr_array);
}



void compute_integral_shell_pair( int npts, shells sh0, shells sh1, 
                                  point *points, double* matrix ) {


  double *rts = (double*) malloc(R_MAX * sizeof(double));
  double *wgh = (double*) malloc(R_MAX * sizeof(double));

  double *vrr_array = (double*) malloc(3 * (Lx + Ly + 1) * R_MAX * sizeof(double));
  double *hrr_array = (double*) malloc(3 * (Lx + 1) * (Ly + 1) * R_MAX * sizeof(double));



  const double xA = sh0.origin.x;
  const double yA = sh0.origin.y;
  const double zA = sh0.origin.z;
  const int    lA = sh0.L;

  const double xB = sh1.origin.x;
  const double yB = sh1.origin.y;
  const double zB = sh1.origin.z;
  const int    lB = sh1.L;

  const double xAB = (xA - xB);
  const double yAB = (yA - yB);
  const double zAB = (zA - zB);

  const int shpair_sz =  (lA+1)*(lA+2) * (lB+1)*(lB+2) / 4;
  const double _ev_exp = -1.0 * (xAB * xAB + yAB * yAB + zAB * zAB);

  // nr of roots
  const int nr_roots = ((int) ceil((lA + lB) / 2.0)) + 1;


  const int lAB = lA + lB;
  const int vrr_x_off = 0;
  const int vrr_y_off = vrr_x_off + (lAB+1) * nr_roots;
  const int vrr_z_off = vrr_y_off + (lAB+1) * nr_roots;

  const int hrr_x_off = 0;
  const int hrr_y_off = hrr_x_off + (lA+1) * (lB+1) * nr_roots;
  const int hrr_z_off = hrr_y_off + (lA+1) * (lB+1) * nr_roots;

  double* vrr_x = vrr_array + vrr_x_off;
  double* vrr_y = vrr_array + vrr_y_off;
  double* vrr_z = vrr_array + vrr_z_off;

  double* hrr_x = hrr_array + hrr_x_off;
  double* hrr_y = hrr_array + hrr_y_off;
  double* hrr_z = hrr_array + hrr_z_off;

  // Loop over primitives
  double beta = 0.0;
  for(int i = 0; i < sh0.m; ++i)
  for(int j = 0; j < sh1.m; ++j) {

    const double aA = sh0.coeff[i].alpha;
    const double cA = sh0.coeff[i].coeff;
    const double aB = sh1.coeff[j].alpha;
    const double cB = sh1.coeff[j].coeff;

    const double aP = aA + aB;
    const double aP_inv = 1.0 / aP;
          
    const double xP = (aA * xA + aB * xB) * aP_inv;
    const double yP = (aA * yA + aB * yB) * aP_inv;
    const double zP = (aA * zA + aB * zB) * aP_inv;
          
    const double xPB = (xP - xB);
    const double yPB = (yP - yB);
    const double zPB = (zP - zB);

    const double eval = exp(_ev_exp * aA * aB * aP_inv);

    // Loop over points
    for(int p = 0; p < npts; ++p ) {

      const double xC = points[p].x;
      const double yC = points[p].y;
      const double zC = points[p].z;

      const double xPC = (xP - xC);
      const double yPC = (yP - yC);
      const double zPC = (zP - zC);

      double tval = aP * (xPC * xPC + yPC * yPC + zPC * zPC);
      for(int i = 0; i < nr_roots; ++i) {
        *(rts + i) = 0.0;
        *(wgh + i) = 2 * PI * aP_inv * eval * cA * cB;
      }
      
      // Compute weights
      rys_rw(1, nr_roots, &tval, rts, wgh);  

      // Compute VRR
      compute_vrr(nr_roots, lAB, xPB, xPC, aP_inv, rts, vrr_x);
      compute_vrr(nr_roots, lAB, yPB, yPC, aP_inv, rts, vrr_y);
      compute_vrr(nr_roots, lAB, zPB, zPC, aP_inv, rts, vrr_z);

      // Compute HRR
      compute_hrr(nr_roots, lA, lB, xAB, vrr_x, hrr_x);
      compute_hrr(nr_roots, lA, lB, yAB, vrr_y, hrr_y);
      compute_hrr(nr_roots, lA, lB, zAB, vrr_z, hrr_z);

      // Compute final primitive integral (int_array)
      double* int_array = matrix + p * shpair_sz;
      compute_reduction(nr_roots, lA, lB, wgh, hrr_array, int_array, beta);

    }

    beta = 1.0;

  }

  free(rts);
  free(wgh);

  free(vrr_array);
  free(hrr_array);
}

void compute_integral_shell_pair_pre( int npts, shell_pair shpair, 
                                  point *points, double* matrix ) {


  double *rts = (double*) malloc(R_MAX * sizeof(double));
  double *wgh = (double*) malloc(R_MAX * sizeof(double));

  double *vrr_array = (double*) malloc(3 * (Lx + Ly + 1) * R_MAX * sizeof(double));
  double *hrr_array = (double*) malloc(3 * (Lx + 1) * (Ly + 1) * R_MAX * sizeof(double));



  const int lA = shpair.lA;;
  const int lB = shpair.lA;;
  const int lAB = lA + lB;

  const double xAB = shpair.rAB.x;
  const double yAB = shpair.rAB.y;
  const double zAB = shpair.rAB.z;

  const int shpair_sz =  (lA+1)*(lA+2) * (lB+1)*(lB+2) / 4;

  // nr of roots
  const int nr_roots = ((int) ceil((lAB) / 2.0)) + 1;


  const int vrr_x_off = 0;
  const int vrr_y_off = vrr_x_off + (lAB+1) * nr_roots;
  const int vrr_z_off = vrr_y_off + (lAB+1) * nr_roots;

  const int hrr_x_off = 0;
  const int hrr_y_off = hrr_x_off + (lA+1) * (lB+1) * nr_roots;
  const int hrr_z_off = hrr_y_off + (lA+1) * (lB+1) * nr_roots;

  double* vrr_x = vrr_array + vrr_x_off;
  double* vrr_y = vrr_array + vrr_y_off;
  double* vrr_z = vrr_array + vrr_z_off;

  double* hrr_x = hrr_array + hrr_x_off;
  double* hrr_y = hrr_array + hrr_y_off;
  double* hrr_z = hrr_array + hrr_z_off;

  // Loop over primitives
  double beta = 0.0;
  prim_pair* prim_pairs = shpair.prim_pairs;
  for(int ij = 0; ij < shpair.nprim_pair; ++ij) {


    const double aP = prim_pairs[ij].gamma;
    const double aP_inv = 1.0 / aP;

    const double xP = prim_pairs[ij].P.x;
    const double yP = prim_pairs[ij].P.y;
    const double zP = prim_pairs[ij].P.z;
          
    const double xPB = prim_pairs[ij].PB.x;
    const double yPB = prim_pairs[ij].PB.y;
    const double zPB = prim_pairs[ij].PB.z;

    const double eval = prim_pairs[ij].K;

    // Loop over points
    for(int p = 0; p < npts; ++p ) {

      const double xC = points[p].x;
      const double yC = points[p].y;
      const double zC = points[p].z;

      const double xPC = (xP - xC);
      const double yPC = (yP - yC);
      const double zPC = (zP - zC);

      double tval = aP * (xPC * xPC + yPC * yPC + zPC * zPC);
      for(int i = 0; i < nr_roots; ++i) {
        *(rts + i) = 0.0;
        *(wgh + i) = 2 * PI * aP_inv * eval * prim_pairs[ij].coeff_prod;
      }
      
      // Compute weights
      rys_rw(1, nr_roots, &tval, rts, wgh);  

      // Compute VRR
      compute_vrr(nr_roots, lAB, xPB, xPC, aP_inv, rts, vrr_x);
      compute_vrr(nr_roots, lAB, yPB, yPC, aP_inv, rts, vrr_y);
      compute_vrr(nr_roots, lAB, zPB, zPC, aP_inv, rts, vrr_z);

      // Compute HRR
      compute_hrr(nr_roots, lA, lB, xAB, vrr_x, hrr_x);
      compute_hrr(nr_roots, lA, lB, yAB, vrr_y, hrr_y);
      compute_hrr(nr_roots, lA, lB, zAB, vrr_z, hrr_z);

      // Compute final primitive integral (int_array)
      double* int_array = matrix + p * shpair_sz;
      compute_reduction(nr_roots, lA, lB, wgh, hrr_array, int_array, beta);

    }

    beta = 1.0;

  }

  free(rts);
  free(wgh);

  free(vrr_array);
  free(hrr_array);
}










